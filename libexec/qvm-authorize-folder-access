#!/usr/bin/python3

import errno
import gi
import os
import re
import sys

from sharedfolders import (
    RESPONSE_ALLOW_ONETIME,
    RESPONSE_ALLOW_ALWAYS,
    RESPONSE_DENY_ONETIME,
    RESPONSE_DENY_ALWAYS,
    RESPONSE_BLOCK,
    is_disp,
)

gi.require_version("Gtk", "3.0")
gi.require_version("Notify", "0.7")

from gi.repository import Gtk
from gi.repository import Notify


def search_for_ui_file(file):
    for trial in [
        os.path.join("ui", file),
        os.path.join("/usr/share/qubes-shared-folders/ui", file),
    ]:
        if os.path.exists(trial):
            return trial
    raise FileNotFound(file)


class AuthorizationDialog(object):
    def __init__(self, client, server, folder):
        builder = Gtk.Builder()
        builder.add_from_file(search_for_ui_file("authorization-dialog.ui"))
        # builder.connect_signals()
        self.builder = builder
        self.dialog = builder.get_object("dialog")
        self.dialog.set_title("Folder share request from %(client)s" % locals())
        self.builder.connect_signals(self)
        if is_disp(client) or is_disp(server):
            self.builder.get_object("option_remember").set_sensitive(False)
        self.builder.get_object("option_deny").set_active(True)
        self.builder.get_object("text").set_markup(
            self.builder.get_object("text").get_label() % locals()
        )
        self.builder.get_object("explanation").set_markup(
            self.builder.get_object("explanation").get_label() % locals()
        )
        self.builder.get_object("folder").set_text(folder)
        self.collect_response()
        self.prior_remember_active = None
        self.prior_remember_sensitive = None

    def block_selected(self, radio):
        if radio.get_active():
            self.prior_remember_active = self.builder.get_object("option_remember").get_active()
            self.prior_remember_sensitive = self.builder.get_object("option_remember").get_sensitive()
            self.builder.get_object("option_remember").set_active(True)
            self.builder.get_object("option_remember").set_sensitive(False)
        else:
            self.builder.get_object("option_remember").set_active(self.prior_remember_active)
            self.builder.get_object("option_remember").set_sensitive(self.prior_remember_sensitive)

    def show_all(self):
        self.dialog.show_all()

    def closed(self, *unused_args):
        Gtk.main_quit()

    def destroyed(self, *unused_args):
        Gtk.main_quit()

    def collect_response(self):
        table = [
            ("option_deny", RESPONSE_DENY_ONETIME),
            ("option_allow", RESPONSE_ALLOW_ONETIME),
            ("option_block", RESPONSE_BLOCK),
        ]
        for objn, resp in table:
            if self.builder.get_object(objn).get_active():
                self.response = resp
        if self.response != RESPONSE_BLOCK:
            if self.builder.get_object("option_remember").get_active():
                if self.response == RESPONSE_ALLOW_ONETIME:
                    self.response = RESPONSE_ALLOW_ALWAYS
                elif self.response == RESPONSE_DENY_ONETIME:
                    self.response = RESPONSE_DENY_ALWAYS

    def response(self, unused_dialog, response):
        if response == 1:
            assert 0, "Folder share manager not implemented"
        elif response == -4:
            # User closed the dialog, we exit with the default response.
            self.dialog.destroy()
        elif response == 0:
            # User made an affirmative choice.
            self.collect_response()
            self.dialog.destroy()


authd = AuthorizationDialog(*sys.argv[1:])
authd.show_all()
Gtk.main()
print(authd.response)
