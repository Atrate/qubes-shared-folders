#!/usr/bin/python3

import base64
import re
import errno
import logging
import os
import subprocess
import sys

from sharedfolders import (
    RESPONSE_ALLOW_ONETIME,
    RESPONSE_ALLOW_ALWAYS,
    RESPONSE_DENY_ONETIME,
    RESPONSE_DENY_ALWAYS,
    RESPONSE_DENY_PREFIX,
    lookup_decision_response,
    ask_for_authorization,
    process_decision_output,
    base_to_str,
    deny,
    reject,
    validate_target_vm,
    validate_path,
    PATH_MAX,
    VM_NAME_MAX,
)


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(os.path.basename(__file__))


if os.getenv("QREXEC_REQUESTED_TARGET_TYPE") != "name":
    print("error: only specific VMs are acceptable as targets", file=sys.stderr)
    reject()

source = os.getenv("QREXEC_REMOTE_DOMAIN")
if not source:
    print("error: no source VM", file=sys.stderr)
    reject()

arguments = sys.stdin.buffer.read(int(PATH_MAX * 130 / 100 + VM_NAME_MAX))
sys.stdin.close()
try:
    base64_target = arguments.split(b"\n")[0]
    base64_folder = arguments.split(b"\n")[1]
except IndexError:
    print("error: the arguments were malformed", file=sys.stderr)
    reject()

try:
    target = base_to_str(base64_target)
    validate_target_vm(target)
except Exception:
    print(
        "error: the target VM is malformed or has invalid characters", file=sys.stderr
    )
    reject()
if source == target:
    print(
        "error: cannot request file share to and from the same VM", file=sys.stderr
    )
    reject()

try:
    folder = base_to_str(base64_folder)
    validate_path(folder)
except Exception:
    print(
        "error: the requested folder is malformed, is not a proper absolute path, or has invalid characters",
        file=sys.stderr,
    )
    reject()


response, fingerprint = lookup_decision_response(source, target, folder)
if response:
    logger.info(
        "VM %s has a response already registered for %s:%s: %s (fingerprint: %s)",
        source,
        target,
        folder,
        response,
        fingerprint,
    )
else:
    logger.info("VM %s has yet to receive a response for %s:%s", source, target, folder)
    # User has never been asked.
    response = ask_for_authorization(source, target, folder)
    fingerprint = process_decision_output(source, target, folder, response)
    logger.info("Response: %s; fingerprint: %s", response, fingerprint)
if response.startswith(RESPONSE_DENY_PREFIX):
    deny()

sys.stdout.write(fingerprint)
sys.stdout.close()
